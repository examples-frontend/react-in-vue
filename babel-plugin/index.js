"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helper_plugin_utils_1 = require("@babel/helper-plugin-utils");
const { parse } = require('@babel/parser');
const DEFAULT_SIGNATURE = 'babel-plugin-react-ssr';
const source = `
// @ts-ignore
const $$ReactCreateElement = (...arg) => {
  console.log(arg[0], arg[1]);
  const CE = React.createElement;
  return CE(...arg)
}
`;
const afterImport = ({ path, t }) => {
    const ast = parse(source);
    path.insertAfter([ast]);
};
const plugin = (0, helper_plugin_utils_1.declare)((api, { signatures = DEFAULT_SIGNATURE }) => {
    let filename = '';
    const { types } = api;
    const t = api.types;
    let pathAfterImport = null;
    let reactIdentifierName = ['React'];
    let createElementIdentifierName = ['createElement'];
    return {
        visitor: {
            Program: {
                exit(path, state) {
                    if (pathAfterImport) {
                        pathAfterImport.insertAfter([ast]);
                    }
                },
                enter(path, state) {
                    filename = state.filename;
                }
            },
            ImportDeclaration(path) {
                let sibling = path.getSibling(path.key + 1);
                if (!sibling.isImportDeclaration()) {
                    afterImport({ path, t });
                }
            },
            CallExpression(path) {
                if (t.isMemberExpression(path.node.callee)) {
                    if (path.node.callee.object.name === "React" && path.node.callee.property.name === "createElement") {
                        path.node.callee = t.identifier('$$ReactCreateElement');
                    }
                }
            }
        },
    };
});
exports.default = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9iYWJlbC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9FQUErRDtBQUMvRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBSzNDLE1BQU0saUJBQWlCLEdBQUcsd0JBQXdCLENBQUM7QUFFbkQsTUFBTSxNQUFNLEdBQUc7Ozs7Ozs7Q0FPZCxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQWdFLEVBQUUsRUFBRTtJQUNoRyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBQSw2QkFBTyxFQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLGlCQUFpQixFQUFFLEVBQUUsRUFBRTtJQUNqRSxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUcsQ0FBQztJQUN0QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBRXBCLElBQUksZUFBZSxHQUFZLElBQUksQ0FBQztJQUVwQyxJQUFJLG1CQUFtQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsSUFBSSwyQkFBMkIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXBELE9BQU87UUFFTCxPQUFPLEVBQUU7WUFDUCxPQUFPLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLElBQVMsRUFBRSxLQUFVO29CQUN4QixJQUFJLGVBQWUsRUFBRTt3QkFFbkIsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7cUJBQ3BDO2dCQUVILENBQUM7Z0JBQ0QsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLO29CQUVmLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUM1QixDQUFDO2FBQ0Y7WUFFQSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUdyQixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLElBQUcsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtvQkFDakMsV0FBVyxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQztZQUVBLGNBQWMsQ0FBQyxJQUFJO2dCQUNsQixJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUUxQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssZUFBZSxFQUFFO3dCQUNsRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLENBQUM7cUJBQ3pEO2lCQUNGO1lBQ0gsQ0FBQztTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVjbGFyZSwgQmFiZWxBUEkgfSBmcm9tICdAYmFiZWwvaGVscGVyLXBsdWdpbi11dGlscyc7XG5jb25zdCB7IHBhcnNlIH0gPSByZXF1aXJlKCdAYmFiZWwvcGFyc2VyJyk7XG5cbmltcG9ydCB0eXBlIHsgSW1wb3J0RGVjbGFyYXRpb24sIFZhcmlhYmxlRGVjbGFyYXRpb24gfSBmcm9tICdAYmFiZWwvdHlwZXMnO1xuaW1wb3J0IHsgQ29uZmlnQVBJLCB0eXBlcyBhcyB0LCBOb2RlUGF0aCwgdGVtcGxhdGUgfSBmcm9tICdAYmFiZWwvY29yZSdcblxuY29uc3QgREVGQVVMVF9TSUdOQVRVUkUgPSAnYmFiZWwtcGx1Z2luLXJlYWN0LXNzcic7XG5cbmNvbnN0IHNvdXJjZSA9IGBcbi8vIEB0cy1pZ25vcmVcbmNvbnN0ICQkUmVhY3RDcmVhdGVFbGVtZW50ID0gKC4uLmFyZykgPT4ge1xuICBjb25zb2xlLmxvZyhhcmdbMF0sIGFyZ1sxXSk7XG4gIGNvbnN0IENFID0gUmVhY3QuY3JlYXRlRWxlbWVudDtcbiAgcmV0dXJuIENFKC4uLmFyZylcbn1cbmA7XG5cbmNvbnN0IGFmdGVySW1wb3J0ID0gKHsgcGF0aCwgdCB9OiB7IHBhdGg6IE5vZGVQYXRoPEltcG9ydERlY2xhcmF0aW9uPjsgIHQ6IEJhYmVsQVBJWyd0eXBlcyddO30pID0+IHtcbiAgY29uc3QgYXN0ID0gcGFyc2Uoc291cmNlKTtcbiAgcGF0aC5pbnNlcnRBZnRlcihbYXN0XSk7XG59XG5cbmNvbnN0IHBsdWdpbiA9IGRlY2xhcmUoKGFwaSwgeyBzaWduYXR1cmVzID0gREVGQVVMVF9TSUdOQVRVUkUgfSkgPT4ge1xuICBsZXQgZmlsZW5hbWUgPSAnJztcbiAgY29uc3QgeyB0eXBlcyB9ID0gYXBpO1xuICBjb25zdCB0ID0gYXBpLnR5cGVzO1xuXG4gIGxldCBwYXRoQWZ0ZXJJbXBvcnQ6IHVua25vd24gPSBudWxsO1xuXG4gIGxldCByZWFjdElkZW50aWZpZXJOYW1lID0gWydSZWFjdCddO1xuICBsZXQgY3JlYXRlRWxlbWVudElkZW50aWZpZXJOYW1lID0gWydjcmVhdGVFbGVtZW50J107XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBpbmhlcml0czogc3ludGF4RHluYW1pY0ltcG9ydCxcbiAgICB2aXNpdG9yOiB7XG4gICAgICBQcm9ncmFtOiB7XG4gICAgICAgIGV4aXQocGF0aDogYW55LCBzdGF0ZTogYW55KSB7XG4gICAgICAgICAgaWYgKHBhdGhBZnRlckltcG9ydCkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcGF0aEFmdGVySW1wb3J0Lmluc2VydEFmdGVyKFthc3RdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2V4aXQnLCB7IHJlYWN0SWRlbnRpZmllck5hbWUsIGNyZWF0ZUVsZW1lbnRJZGVudGlmaWVyTmFtZSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW50ZXIocGF0aCwgc3RhdGUpIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgZmlsZW5hbWUgPSBzdGF0ZS5maWxlbmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAsSW1wb3J0RGVjbGFyYXRpb24ocGF0aCkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDQutCwINGB0LvQtdC00YPRjtGJ0LXQs9C+INGD0LfQu9CwXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IHNpYmxpbmcgPSBwYXRoLmdldFNpYmxpbmcocGF0aC5rZXkgKyAxKTtcbiAgICAgICAgaWYoIXNpYmxpbmcuaXNJbXBvcnREZWNsYXJhdGlvbigpKSB7XG4gICAgICAgICAgYWZ0ZXJJbXBvcnQoe3BhdGgsIHR9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAsQ2FsbEV4cHJlc3Npb24ocGF0aCkge1xuICAgICAgICBpZiAodC5pc01lbWJlckV4cHJlc3Npb24ocGF0aC5ub2RlLmNhbGxlZSkpIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgaWYgKHBhdGgubm9kZS5jYWxsZWUub2JqZWN0Lm5hbWUgPT09IFwiUmVhY3RcIiAmJiBwYXRoLm5vZGUuY2FsbGVlLnByb3BlcnR5Lm5hbWUgPT09IFwiY3JlYXRlRWxlbWVudFwiKSB7XG4gICAgICAgICAgICBwYXRoLm5vZGUuY2FsbGVlID0gdC5pZGVudGlmaWVyKCckJFJlYWN0Q3JlYXRlRWxlbWVudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcGx1Z2luO1xuIl19